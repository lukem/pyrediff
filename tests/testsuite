#! /bin/sh
# Generated from testsuite.at by GNU Autoconf 2.72.
#
# Copyright (C) 2009-2017, 2020-2023 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
#
#
# Copyright 2013-2024, Luke Mewburn <luke@mewburn.net>.
# All rights reserved.
#
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test ${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else case e in #(
  e) case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac ;;
esac
fi



# Reset variables that may have inherited troublesome values from
# the environment.

# IFS needs to be set, to space, tab, and newline, in precisely that order.
# (If _AS_PATH_WALK were called with IFS unset, it would have the
# side effect of setting IFS to empty, thus disabling word splitting.)
# Quoting is to prevent editors from complaining about space-tab.
as_nl='
'
export as_nl
IFS=" ""	$as_nl"

PS1='$ '
PS2='> '
PS4='+ '

# Ensure predictable behavior from utilities with locale-dependent output.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# We cannot yet rely on "unset" to work, but we need these variables
# to be unset--not just set to an empty or harmless value--now, to
# avoid bugs in old shells (e.g. pre-3.0 UWIN ksh).  This construct
# also avoids known problems related to "unset" and subshell syntax
# in other old shells (e.g. bash 2.01 and pdksh 5.2.14).
for as_var in BASH_ENV ENV MAIL MAILPATH CDPATH
do eval test \${$as_var+y} \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done

# Ensure that fds 0, 1, and 2 are open.
if (exec 3>&0) 2>/dev/null; then :; else exec 0</dev/null; fi
if (exec 3>&1) 2>/dev/null; then :; else exec 1>/dev/null; fi
if (exec 3>&2)            ; then :; else exec 2>/dev/null; fi

# The user is always right.
if ${PATH_SEPARATOR+false} :; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -r "$as_dir$0" && as_myself=$as_dir$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as 'sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  printf "%s\n" "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi


if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test \${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else case e in #(
  e) case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" )
then :

else case e in #(
  e) exitcode=1; echo positional parameters were not saved. ;;
esac
fi
test x\$exitcode = x0 || exit 1
blah=\$(echo \$(echo blah))
test x\"\$blah\" = xblah || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null
then :
  as_have_required=yes
else case e in #(
  e) as_have_required=no ;;
esac
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null
then :

else case e in #(
  e) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    as_run=a "$as_shell" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if as_run=a "$as_shell" -c "$as_bourne_compatible""$as_suggested" 2>/dev/null
then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
IFS=$as_save_IFS
if $as_found
then :

else case e in #(
  e) if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      as_run=a "$SHELL" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi ;;
esac
fi


      if test "x$CONFIG_SHELL" != x
then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed 'exec'.
printf "%s\n" "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno
then :
  printf "%s\n" "$0: This script requires a shell more modern than all"
  printf "%s\n" "$0: the shells that I found on your system."
  if test ${ZSH_VERSION+y} ; then
    printf "%s\n" "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    printf "%s\n" "$0: be upgraded to zsh 4.3.4 or later."
  else
    printf "%s\n" "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi ;;
esac
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset


# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`printf "%s\n" "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
printf "%s\n" X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir" "$LINENO" 5


} # as_fn_mkdir_p

# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null
then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else case e in #(
  e) as_fn_append ()
  {
    eval $1=\$$1\$2
  } ;;
esac
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null
then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else case e in #(
  e) as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  } ;;
esac
fi # as_fn_arith


# ax_at_diff_pattern PATTERN OUTPUT
# ---------------------------------
# Diff PATTERN OUTPUT and elide change lines where the RE pattern matches
ax_at_diff_pattern ()
{
diff "$1" "$2" | $AWK 'BEGIN { exitval=0 }

function set_mode(m)
{
	mode=m
	lc=0
	rc=0
}

function mismatch()
{
	print mode
	for (i = 0; i < lc; i++) {
		print ll[i]
	}
	print "---"
	for (i = 0; i < rc; i++) {
		print rl[i]
	}
	set_mode("")
	exitval=1
}

function change_mode(m)
{
	if (lc > rc) {
		mismatch()
	}
	set_mode(m)
}

$1 ~ /^[0-9]+(,[0-9]+)?[ad][0-9]+(,[0-9]+)?$/ {
	change_mode("")
	print
	exitval=1
	next
}

$1 ~ /^[0-9]+(,[0-9]+)?[c][0-9]+(,[0-9]+)?$/ {
	change_mode($1)
	next
}

mode == "" {
	print $0
	next
}

$1 == "<" {
	ll[lc] = $0
	lc = lc + 1
	next
}

$1 == "---" {
	next
}

$1 == ">" {
	rl[rc] = $0
	rc = rc + 1
	if (rc > lc) {
		mismatch()
		next
	}
	pat = "^" substr(ll[rc-1], 3) "$"
	str = substr($0, 3)
	if (str !~ pat) {
		mismatch()
	}
	next
}

{
	print "UNEXPECTED LINE: " $0
	exitval=10
	exit
}

END {
	if (exitval != 10) {
		change_mode("")
	}
	exit exitval
}
'
} # ax_at_diff_pattern

# ax_at_diff_pyre PYRE OUTPUT
# ---------------------------
# Diff PYRE OUTPUT and elide change lines where the python RE matches
ax_at_diff_pyre ()
{
$PYTHON -c 'from __future__ import print_function
import io
import optparse  # pylint: disable=deprecated-module
import re
import subprocess
import sys

__version__ = "18"

# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring
# pylint: disable=bad-option-value,consider-using-f-string


class Pyrediff:
    _add_del_re = re.compile(r"^(\d+a\d+(,\d+)?|\d+(,\d+)?d\d+)$")
    _change_re = re.compile(r"^\d+(,\d+)?c\d+(,\d+)?$")
    _group_re = re.compile(r"\\g<([^>]+)>")
    if sys.version_info < (3, 3):
        _escape_re = re.compile(r"\\([-\s!\"#&%,/:;<=>@_`'\''~])")
    elif sys.version_info < (3, 7):
        # 3.3 .. 3.6 doesn'\''t escape "_"
        _escape_re = re.compile(r"\\([-\s!\"#&%,/:;<=>@`'\''~])")
    else:
        # 3.7+ doesn'\''t escape '\''!'\'', '\''"'\'', '\''%'\'', "'\''", '\'','\'', '\''/'\'', '\'':'\'', '\'';'\'',
        # '\''<'\'', '\''='\'', '\''>'\'', '\''@'\'', and "`"
        _escape_re = re.compile(r"\\([-\s#&%,~])")

    def __init__(self):
        self.fail = False
        self.groups = {}
        self.set_mode()

    def diff(self, input_fp):
        for line in input_fp:
            self.diff_line(line.rstrip("\n"))
        self.change_mode()
        return self.fail

    def escape(self, input_name):
        with io.open(input_name, "r", encoding="utf-8") as output_fp:
            for line in output_fp:
                esc = re.escape(line)
                esc = self._escape_re.sub(r"\1", esc)
                sys.stdout.write(esc)

    def diff_line(self, line):
        if self._add_del_re.match(line):
            self.change_mode()
            print(line)
            self.fail = True
        elif self._change_re.match(line):
            self.change_mode(line)
        elif self.mode is None:
            print(line)
        elif line.startswith("< "):
            self.patlines.append(line)
        elif line == "---":
            return None
        elif line.startswith("> "):
            self.strlines.append(line)
            idx = len(self.strlines) - 1
            if idx >= len(self.patlines):
                return self.mismatch()
            pat = self._group_re.sub(self.repl_groups, self.patlines[idx][2:])
            raw = line[2:]
            try:
                match = re.match("^(?:{0})$".format(pat), raw)
            except re.error as exc:
                print('\''# ERROR: Pattern "{0}": {1}'\''.format(pat, exc))
                return self.mismatch()
            if match is None:
                return self.mismatch()
            for key, val in match.groupdict("").items():
                self.groups[key] = re.escape(val)
        else:
            raise NotImplementedError("unexpected line={0!r}".format(line))
        return None

    def change_mode(self, mode=None):
        if len(self.patlines) > len(self.strlines):
            self.mismatch()
        self.set_mode(mode)

    def mismatch(self):
        print(self.mode)
        print("\n".join(self.patlines))
        print("---")
        print("\n".join(self.strlines))
        self.set_mode()
        self.fail = True

    def repl_groups(self, match):
        if match.group(1) in self.groups:
            return self.groups[match.group(1)]
        print(
            "# ERROR: Pattern \\g<{0}>: {1}".format(
                match.group(1), "Unknown group"
            )
        )
        return re.escape(match.string)

    def set_mode(self, mode=None):
        self.mode = mode
        self.patlines = []
        self.strlines = []

    def parse_args(self):
        # pylint: disable=bad-option-value,useless-option-value,no-self-use
        parser = optparse.OptionParser(
            usage="""%prog PATTERN OUTPUT
       %prog -e INPUT
       %prog -f\
""",
            description="""\
Pattern-aware comparison of PATTERN and OUTPUT.
Similar to diff(1), except that PATTERN may contain python regular expressions.
Strings captured in a named group using (?P<name>...) can be used in subsequent
pattern lines with \\g<name>; occurrences of \\g<name> in the pattern line will
be replaced with a previously captured value before the pattern is applied.
""",
            version="%prog " + __version__,
        )
        parser.add_option(
            "-e",
            "--escape",
            metavar="INPUT",
            help="escape INPUT to stdout instead of diffing",
        )
        parser.add_option(
            "-f",
            "--filter",
            action="store_true",
            default=False,
            help="filter stdin, which is the output of `diff PATTERN OUTPUT`",
        )
        (opts, args) = parser.parse_args()
        modes = 0
        if opts.escape is not None:
            modes += 1
        if opts.filter:
            modes += 1
        if modes > 1:
            parser.error("-e and -f and mutually exclusive")
        elif modes == 1:
            if len(args) != 0:
                parser.error("incorrect number of arguments")
        else:
            if len(args) != 2:
                parser.error("incorrect number of arguments")
        return (opts, args)

    def main(self):
        (opts, args) = self.parse_args()
        if opts.escape is not None:
            self.escape(opts.escape)
        elif opts.filter:
            if self.diff(sys.stdin):
                sys.exit(1)
        else:
            # pylint: disable=bad-option-value,consider-using-with
            pipe = subprocess.Popen(
                ["diff", args[0], args[1]],
                stdout=subprocess.PIPE,
            )
            if sys.version_info < (3, 0):
                pout = pipe.stdout
            else:
                pout = io.TextIOWrapper(pipe.stdout)
            if self.diff(pout):
                sys.exit(1)
            prv = pipe.wait()
            if prv > 1:
                sys.exit(prv)


if __name__ == "__main__":
    Pyrediff().main()
' "$1" "$2"
} # ax_at_diff_pyre

# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    printf "%s\n" "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  printf "%s\n" "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
printf "%s\n" X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      t clear
      :clear
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { printf "%s\n" "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


# Determine whether it's possible to make 'echo' print without a newline.
# These variables are no longer used directly by Autoconf, but are AC_SUBSTed
# for compatibility with existing Makefiles.
ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

# For backward compatibility with old third-party macros, we provide
# the shell variables $as_echo and $as_echo_n.  New code should use
# AS_ECHO(["message"]) and AS_ECHO_N(["message"]), respectively.
as_echo='printf %s\n'
as_echo_n='printf %s'

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both 'ln -s file dir' and 'ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; 'ln -s' creates a wrapper executable.
    # In both cases, we have to default to 'cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_sed_cpp="y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g"
as_tr_cpp="eval sed '$as_sed_cpp'" # deprecated

# Sed expression to map a string onto a valid variable name.
as_sed_sh="y%*+%pp%;s%[^_$as_cr_alnum]%_%g"
as_tr_sh="eval sed '$as_sed_sh'" # deprecated

if ${AWK:+false} :
then :
  AWK=awk
fi



if ${PYTHON:+false} :
then :
  PYTHON=python
fi







SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be ':' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=auto
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that 'ls' lists them in
# numerical order.
at_format='??'
# Description of all the test groups.
at_help_all="1;01-simple.at:1;simple (no pattern);;
2;02-trivial.at:1;trivial pattern;;
3;03-complex.at:1;complex pattern;;
4;04-trivial-bad.at:1;trivial bad pattern;;
5;05-complex-diffs.at:1;complex diffs;;
6;06-extract.at:1;extract check_pattern.awk & pyrediff;;
7;07-quoting.at:1;macro quoting;;
8;08-example1.at:1;example 1: simple example;;
9;09-example2.at:1;example 2: extra lines in output;;
10;10-example3.at:1;example 3: pyre (?P<group>) and \\g<group>;;
11;11-group-escape.at:1;pyre \\g<group> escaping;group escape;
12;12-example4.at:1;example 4: missing lines in output;;
13;13-escape.at:1;pyrediff -e (escape);escape;
14;14-group-unknown.at:1;pyre (?P=group) \\g<group2> unknown;group;
15;15-alternation-bad.at:1;pyre alternation bad;;
16;16-alternation-optional.at:1;pyre alternation optional;;
17;17-version.at:1;pyrediff --version;;
"
# List of the all the test groups.
at_groups_all=`printf "%s\n" "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 17; then
      printf "%s\n" "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" "$LINENO" 5 ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" "$LINENO" 5 ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`printf "%s\n" "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`printf "%s\n" "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: '$at_envvar'" "$LINENO" 5 ;;
	esac
	at_value=`printf "%s\n" "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) printf "%s\n" "$as_me: invalid option: $at_option" >&2
	printf "%s\n" "Try '$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"
then :
  as_fn_error $? "'$at_prev' requires an argument" "$LINENO" 5
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`printf "%s\n" "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set 'AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 disable colored test results, or enable even without terminal
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple '-k' accumulate; prefixed '!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <luke@mewburn.net>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
pyrediff 18 test suite: pyrediff test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  printf "%s\n" "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  printf "%s\n" "$as_me (pyrediff 18)" &&
  cat <<\_ATEOF || at_write_fail=1

Copyright (C) 2023 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.


Copyright 2013-2024, Luke Mewburn <luke@mewburn.net>.
All rights reserved.

_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory" "$LINENO" 5
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file" "$LINENO" 5
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user 'cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to '.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`printf "%s\n" "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.
# 5 is the log file.  Not to be overwritten if '-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
printf "%s\n" "## --------------------------------- ##
## pyrediff 18 test suite: pyrediff. ##
## --------------------------------- ##"
{
  printf "%s\n" "## --------------------------------- ##
## pyrediff 18 test suite: pyrediff. ##
## --------------------------------- ##"
  echo

  printf "%s\n" "$as_me: command line was:"
  printf "%s\n" "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    printf "%s\n" "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    printf "%s\n" "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    printf "%s\n" "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    printf "%s\n" "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  printf "%s\n" "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  printf "%s\n" "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do printf "%s\n" "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	printf "%s\n" "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	printf "%s\n" "$3: hard failure"; exit 99;;
    *) printf "%s\n" "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test ${ZSH_VERSION+y} && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    printf "%s\n" "cd '$at_dir'" &&
    printf "%s\n" "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  printf "%s\n" "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
printf "%s\n" "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create '$at_suite_dir'" "$LINENO" 5

# Can we diff with '/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use 'diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for '-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"
then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
printf "%s\n" "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above 'rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet printf %s "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might 'rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <luke@mewburn.net>.
_ATEOF
    printf "%s\n" "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose printf %s "$at_group. $at_setup_line: "
  printf %s "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    printf "%s\n" "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    printf "%s\n" " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      printf "%s\n" "$at_log_msg" >> "$at_group_log"
      printf "%s\n" "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      printf "%s\n" "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 1 -gt 2 && at_signame=$at_signal
	{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
printf "%s\n" "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test ${TMOUT+y} && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`printf "%s\n" "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
printf "%s\n" "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
printf "%s\n" "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
printf "%s\n" "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    printf "%s\n" "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
printf "%s\n" "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  printf "%s\n" "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    printf "%s\n" "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      printf "%s\n" "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="'${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  at_msg1a=${at_xpass_list:+', '}
  at_msg1=$at_fail_list${at_fail_list:+" failed$at_msg1a"}
  at_msg2=$at_xpass_list${at_xpass_list:+" passed unexpectedly"}

  printf "%s\n" "Please send $at_msg and all information you think might help:

   To: <luke@mewburn.net>
   Subject: [pyrediff 18] $as_me: $at_msg1$at_msg2

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below '${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 '01-simple.at:1' \
  "simple (no pattern)" "                            "
at_xfail=no
(
  printf "%s\n" "1. $at_setup_line: testing $at_desc ..."
  $at_traceon



_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/01-simple.at:3: echo ab; echo c"
at_fn_check_prepare_trace "01-simple.at:3"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab
c
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/01-simple.at:3"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/01-simple.at:8: echo ab; echo c"
at_fn_check_prepare_trace "01-simple.at:8"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab
c
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/01-simple.at:8"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 '02-trivial.at:1' \
  "trivial pattern" "                                "
at_xfail=no
(
  printf "%s\n" "2. $at_setup_line: testing $at_desc ..."
  $at_traceon



_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:3: echo ab; echo c"
at_fn_check_prepare_trace "02-trivial.at:3"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab?d?
c
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:3"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




cat >02.re <<'_ATEOF'
ab?d?
c
_ATEOF


{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:14: echo ab; echo c"
at_fn_check_prepare_trace "02-trivial.at:14"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:14"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:15: ax_at_diff_pattern 02.re stdout"
at_fn_check_prepare_trace "02-trivial.at:15"
( $at_check_trace; ax_at_diff_pattern 02.re stdout
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:15"
$at_failed && at_fn_log_failure
$at_traceon; }






_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:19: echo ab; echo c"
at_fn_check_prepare_trace "02-trivial.at:19"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab?d?
c
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:19"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:24: echo ab; echo c"
at_fn_check_prepare_trace "02-trivial.at:24"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:24"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/02-trivial.at:25: ax_at_diff_pyre 02.re stdout"
at_fn_check_prepare_trace "02-trivial.at:25"
( $at_check_trace; ax_at_diff_pyre 02.re stdout
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/02-trivial.at:25"
$at_failed && at_fn_log_failure
$at_traceon; }




  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 '03-complex.at:1' \
  "complex pattern" "                                "
at_xfail=no
(
  printf "%s\n" "3. $at_setup_line: testing $at_desc ..."
  $at_traceon



_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:3: env LC_TIME=C TZ=UTC date"
at_fn_check_prepare_trace "03-complex.at:3"
( $at_check_trace; env LC_TIME=C TZ=UTC date
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "[A-Z][a-z][a-z] [A-Z][a-z][a-z] [ 0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9] UTC [0-9][0-9][0-9][0-9]
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:3"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:7: env LC_TIME=C TZ=UTC date"
at_fn_check_prepare_trace "03-complex.at:7"
( $at_check_trace; env LC_TIME=C TZ=UTC date
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "([A-Z][a-z][a-z] ){2}( |\\d)\\d \\d{2}:\\d{2}:\\d{2} UTC \\d{4}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:7"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




cat >03.re <<'_ATEOF'
[A-Z][a-z][a-z] [A-Z][a-z][a-z] [ 0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9] UTC [0-9][0-9][0-9][0-9]
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:15: env LC_TIME=C TZ=UTC date"
at_fn_check_prepare_trace "03-complex.at:15"
( $at_check_trace; env LC_TIME=C TZ=UTC date
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:15"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:16: mv stdout 03.out"
at_fn_check_prepare_trace "03-complex.at:16"
( $at_check_trace; mv stdout 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:16"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:17: ax_at_diff_pattern 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:17"
( $at_check_trace; ax_at_diff_pattern 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:17"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:18: ax_at_diff_pattern 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:18"
( $at_check_trace; ax_at_diff_pattern 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:18"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:19: ax_at_diff_pattern 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:19"
( $at_check_trace; ax_at_diff_pattern 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }




{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:21: ax_at_diff_pyre 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:21"
( $at_check_trace; ax_at_diff_pyre 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:21"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:22: ax_at_diff_pyre 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:22"
( $at_check_trace; ax_at_diff_pyre 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:22"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/03-complex.at:23: ax_at_diff_pyre 03.re 03.out"
at_fn_check_prepare_trace "03-complex.at:23"
( $at_check_trace; ax_at_diff_pyre 03.re 03.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/03-complex.at:23"
$at_failed && at_fn_log_failure
$at_traceon; }




  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 '04-trivial-bad.at:1' \
  "trivial bad pattern" "                            "
at_xfail=no
(
  printf "%s\n" "4. $at_setup_line: testing $at_desc ..."
  $at_traceon


fault=false

_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/04-trivial-bad.at:4: echo ab; echo c"
at_fn_check_prepare_trace "04-trivial-bad.at:4"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab?d?
C
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/04-trivial-bad.at:4"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";echo expected mismatch;exit 0
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff";echo unexpected match;fault=true ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }


printf "%s\n" "04-trivial-bad.at:11" >"$at_check_line_file"
($fault) \
  && at_fn_check_skip 99 "$at_srcdir/04-trivial-bad.at:11"


fault=false

_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/04-trivial-bad.at:15: echo ab; echo c"
at_fn_check_prepare_trace "04-trivial-bad.at:15"
( $at_check_trace; echo ab; echo c
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "ab?d?
C
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/04-trivial-bad.at:15"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";echo expected mismatch;exit 0
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";echo unexpected match;fault=true ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }


printf "%s\n" "04-trivial-bad.at:22" >"$at_check_line_file"
($fault) \
  && at_fn_check_skip 99 "$at_srcdir/04-trivial-bad.at:22"


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 '05-complex-diffs.at:1' \
  "complex diffs" "                                  "
at_xfail=no
(
  printf "%s\n" "5. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >05.re <<'_ATEOF'
first line is ok
second line changes .*
second( second)? changes .*
third line
fourth line
fifth line
sixth line
_ATEOF


cat >05.out <<'_ATEOF'
new first line
first line is ok
second line changes Sat Nov  9 08:23:01 EST 2013
second changes *
third line
fourth line change
fourth.2 new
fifth line
_ATEOF


{ set +x
printf "%s\n" "$at_srcdir/05-complex-diffs.at:28: diff 05.re 05.out"
at_fn_check_prepare_trace "05-complex-diffs.at:28"
( $at_check_trace; diff 05.re 05.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "0a1
> new first line
2,3c3,4
< second line changes .*
< second( second)? changes .*
---
> second line changes Sat Nov  9 08:23:01 EST 2013
> second changes *
5c6,7
< fourth line
---
> fourth line change
> fourth.2 new
7d8
< sixth line
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/05-complex-diffs.at:28"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/05-complex-diffs.at:61: ax_at_diff_pattern 05.re 05.out"
at_fn_check_prepare_trace "05-complex-diffs.at:61"
( $at_check_trace; ax_at_diff_pattern 05.re 05.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "0a1
> new first line
5c6,7
< fourth line
---
> fourth line change
> fourth.2 new
7d8
< sixth line
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/05-complex-diffs.at:61"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/05-complex-diffs.at:63: ax_at_diff_pyre 05.re 05.out"
at_fn_check_prepare_trace "05-complex-diffs.at:63"
( $at_check_trace; ax_at_diff_pyre 05.re 05.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "0a1
> new first line
5c6,7
< fourth line
---
> fourth line change
> fourth.2 new
7d8
< sixth line
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/05-complex-diffs.at:63"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/05-complex-diffs.at:65: ax_at_diff_pattern 05.re 05.out"
at_fn_check_prepare_trace "05-complex-diffs.at:65"
( $at_check_trace; ax_at_diff_pattern 05.re 05.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "0a1
> new first line
5c6,7
< fourth line
---
> fourth line change
> fourth.2 new
7d8
< sixth line
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/05-complex-diffs.at:65"
$at_failed && at_fn_log_failure
$at_traceon; }




{ set +x
printf "%s\n" "$at_srcdir/05-complex-diffs.at:67: ax_at_diff_pyre 05.re 05.out"
at_fn_check_prepare_trace "05-complex-diffs.at:67"
( $at_check_trace; ax_at_diff_pyre 05.re 05.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "0a1
> new first line
5c6,7
< fourth line
---
> fourth line change
> fourth.2 new
7d8
< sixth line
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/05-complex-diffs.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }




  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 '06-extract.at:1' \
  "extract check_pattern.awk & pyrediff" "           "
at_xfail=no
(
  printf "%s\n" "6. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >check_pattern.awk <<'_ATEOF'
# check_pattern.awk
# Generated by AX_AT_DATA_CHECK_PATTERN_AWK()
# from https://github.com/lukem/pyrediff
#
# awk script to process the output of "diff PATTERN OUTPUT" removing lines
# where the difference is a PATTERN line that exactly matches an OUTPUT line.
#
#
# Copyright (c) 2013-2023, Luke Mewburn <luke@mewburn.net>
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#

BEGIN { exitval=0 }

function set_mode(m)
{
	mode=m
	lc=0
	rc=0
}

function mismatch()
{
	print mode
	for (i = 0; i < lc; i++) {
		print ll[i]
	}
	print "---"
	for (i = 0; i < rc; i++) {
		print rl[i]
	}
	set_mode("")
	exitval=1
}

function change_mode(m)
{
	if (lc > rc) {
		mismatch()
	}
	set_mode(m)
}

$1 ~ /^[0-9]+(,[0-9]+)?[ad][0-9]+(,[0-9]+)?$/ {
	change_mode("")
	print
	exitval=1
	next
}

$1 ~ /^[0-9]+(,[0-9]+)?[c][0-9]+(,[0-9]+)?$/ {
	change_mode($1)
	next
}

mode == "" {
	print $0
	next
}

$1 == "<" {
	ll[lc] = $0
	lc = lc + 1
	next
}

$1 == "---" {
	next
}

$1 == ">" {
	rl[rc] = $0
	rc = rc + 1
	if (rc > lc) {
		mismatch()
		next
	}
	pat = "^" substr(ll[rc-1], 3) "$"
	str = substr($0, 3)
	if (str !~ pat) {
		mismatch()
	}
	next
}

{
	print "UNEXPECTED LINE: " $0
	exitval=10
	exit
}

END {
	if (exitval != 10) {
		change_mode("")
	}
	exit exitval
}
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/06-extract.at:5: diff \$top_srcdir/src/check_pattern.awk check_pattern.awk"
at_fn_check_prepare_dynamic "diff $top_srcdir/src/check_pattern.awk check_pattern.awk" "06-extract.at:5"
( $at_check_trace; diff $top_srcdir/src/check_pattern.awk check_pattern.awk
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/06-extract.at:5"
$at_failed && at_fn_log_failure
$at_traceon; }



cat >pyrediff <<'_ATEOF'
#!/usr/bin/env python

"""
pyrediff PATTERN OUTPUT
pyrediff -e INPUT
pyrediff -f

pyrediff is a Python script to perform pattern-aware diff comparison
of PATTERN and OUTPUT to remove blocks that don't differ if a given
Python regular expression (pyre) line in PATTERN matches the equivalent
line in OUTPUT.

https://github.com/lukem/pyrediff

Copyright (c) 2015-2024, Luke Mewburn <luke@mewburn.net>

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.
"""

from __future__ import print_function
import io
import optparse  # pylint: disable=deprecated-module
import re
import subprocess
import sys

__version__ = "18"

# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring
# pylint: disable=bad-option-value,consider-using-f-string


class Pyrediff:
    _add_del_re = re.compile(r"^(\d+a\d+(,\d+)?|\d+(,\d+)?d\d+)$")
    _change_re = re.compile(r"^\d+(,\d+)?c\d+(,\d+)?$")
    _group_re = re.compile(r"\\g<([^>]+)>")
    if sys.version_info < (3, 3):
        _escape_re = re.compile(r"\\([-\s!\"#&%,/:;<=>@_`'~])")
    elif sys.version_info < (3, 7):
        # 3.3 .. 3.6 doesn't escape "_"
        _escape_re = re.compile(r"\\([-\s!\"#&%,/:;<=>@`'~])")
    else:
        # 3.7+ doesn't escape '!', '"', '%', "'", ',', '/', ':', ';',
        # '<', '=', '>', '@', and "`"
        _escape_re = re.compile(r"\\([-\s#&%,~])")

    def __init__(self):
        self.fail = False
        self.groups = {}
        self.set_mode()

    def diff(self, input_fp):
        for line in input_fp:
            self.diff_line(line.rstrip("\n"))
        self.change_mode()
        return self.fail

    def escape(self, input_name):
        with io.open(input_name, "r", encoding="utf-8") as output_fp:
            for line in output_fp:
                esc = re.escape(line)
                esc = self._escape_re.sub(r"\1", esc)
                sys.stdout.write(esc)

    def diff_line(self, line):
        if self._add_del_re.match(line):
            self.change_mode()
            print(line)
            self.fail = True
        elif self._change_re.match(line):
            self.change_mode(line)
        elif self.mode is None:
            print(line)
        elif line.startswith("< "):
            self.patlines.append(line)
        elif line == "---":
            return None
        elif line.startswith("> "):
            self.strlines.append(line)
            idx = len(self.strlines) - 1
            if idx >= len(self.patlines):
                return self.mismatch()
            pat = self._group_re.sub(self.repl_groups, self.patlines[idx][2:])
            raw = line[2:]
            try:
                match = re.match("^(?:{0})$".format(pat), raw)
            except re.error as exc:
                print('# ERROR: Pattern "{0}": {1}'.format(pat, exc))
                return self.mismatch()
            if match is None:
                return self.mismatch()
            for key, val in match.groupdict("").items():
                self.groups[key] = re.escape(val)
        else:
            raise NotImplementedError("unexpected line={0!r}".format(line))
        return None

    def change_mode(self, mode=None):
        if len(self.patlines) > len(self.strlines):
            self.mismatch()
        self.set_mode(mode)

    def mismatch(self):
        print(self.mode)
        print("\n".join(self.patlines))
        print("---")
        print("\n".join(self.strlines))
        self.set_mode()
        self.fail = True

    def repl_groups(self, match):
        if match.group(1) in self.groups:
            return self.groups[match.group(1)]
        print(
            "# ERROR: Pattern \\g<{0}>: {1}".format(
                match.group(1), "Unknown group"
            )
        )
        return re.escape(match.string)

    def set_mode(self, mode=None):
        self.mode = mode
        self.patlines = []
        self.strlines = []

    def parse_args(self):
        # pylint: disable=bad-option-value,useless-option-value,no-self-use
        parser = optparse.OptionParser(
            usage="""%prog PATTERN OUTPUT
       %prog -e INPUT
       %prog -f\
""",
            description="""\
Pattern-aware comparison of PATTERN and OUTPUT.
Similar to diff(1), except that PATTERN may contain python regular expressions.
Strings captured in a named group using (?P<name>...) can be used in subsequent
pattern lines with \\g<name>; occurrences of \\g<name> in the pattern line will
be replaced with a previously captured value before the pattern is applied.
""",
            version="%prog " + __version__,
        )
        parser.add_option(
            "-e",
            "--escape",
            metavar="INPUT",
            help="escape INPUT to stdout instead of diffing",
        )
        parser.add_option(
            "-f",
            "--filter",
            action="store_true",
            default=False,
            help="filter stdin, which is the output of `diff PATTERN OUTPUT`",
        )
        (opts, args) = parser.parse_args()
        modes = 0
        if opts.escape is not None:
            modes += 1
        if opts.filter:
            modes += 1
        if modes > 1:
            parser.error("-e and -f and mutually exclusive")
        elif modes == 1:
            if len(args) != 0:
                parser.error("incorrect number of arguments")
        else:
            if len(args) != 2:
                parser.error("incorrect number of arguments")
        return (opts, args)

    def main(self):
        (opts, args) = self.parse_args()
        if opts.escape is not None:
            self.escape(opts.escape)
        elif opts.filter:
            if self.diff(sys.stdin):
                sys.exit(1)
        else:
            # pylint: disable=bad-option-value,consider-using-with
            pipe = subprocess.Popen(
                ["diff", args[0], args[1]],
                stdout=subprocess.PIPE,
            )
            if sys.version_info < (3, 0):
                pout = pipe.stdout
            else:
                pout = io.TextIOWrapper(pipe.stdout)
            if self.diff(pout):
                sys.exit(1)
            prv = pipe.wait()
            if prv > 1:
                sys.exit(prv)


if __name__ == "__main__":
    Pyrediff().main()
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/06-extract.at:9: diff \$top_srcdir/src/pyrediff pyrediff"
at_fn_check_prepare_dynamic "diff $top_srcdir/src/pyrediff pyrediff" "06-extract.at:9"
( $at_check_trace; diff $top_srcdir/src/pyrediff pyrediff
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/06-extract.at:9"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 '07-quoting.at:1' \
  "macro quoting" "                                  "
at_xfail=no
(
  printf "%s\n" "7. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:3: echo 1, 2"
at_fn_check_prepare_trace "07-quoting.at:3"
( $at_check_trace; echo 1, 2
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1, 2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:3"
$at_failed && at_fn_log_failure
$at_traceon; }



_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:7: echo 1, 2"
at_fn_check_prepare_trace "07-quoting.at:7"
( $at_check_trace; echo 1, 2
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1, 2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:7"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:11: echo 1, 2"
at_fn_check_prepare_trace "07-quoting.at:11"
( $at_check_trace; echo 1, 2
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1, 2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:11"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:15: echo \"1,  2\""
at_fn_check_prepare_trace "07-quoting.at:15"
( $at_check_trace; echo "1,  2"
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1,  2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:15"
$at_failed && at_fn_log_failure
$at_traceon; }



_ax_at_check_pattern_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pattern'
{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:19: echo \"1,   2\""
at_fn_check_prepare_trace "07-quoting.at:19"
( $at_check_trace; echo "1,   2"
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1, +2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:19"
if $at_failed
then :
  at_diff="$_ax_at_check_pattern_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pattern_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }




_ax_at_check_pyrediff_prepare_original_at_diff="$at_diff"
at_diff='ax_at_diff_pyre'
{ set +x
printf "%s\n" "$at_srcdir/07-quoting.at:23: echo \"1,   2\""
at_fn_check_prepare_trace "07-quoting.at:23"
( $at_check_trace; echo "1,   2"
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1, +2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/07-quoting.at:23"
if $at_failed
then :
  at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff";
else case e in #(
  e) at_diff="$_ax_at_check_pyrediff_prepare_original_at_diff"; ;;
esac
fi
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 '08-example1.at:1' \
  "example 1: simple example" "                      "
at_xfail=no
(
  printf "%s\n" "8. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >1.pattern <<'_ATEOF'
First line
Second line with a date .*\.
_ATEOF


cat >1.output <<'_ATEOF'
First line
Second line with a date 2014-11-22T16:41:00.
_ATEOF


{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:17: diff 1.pattern 1.output"
at_fn_check_prepare_trace "08-example1.at:17"
( $at_check_trace; diff 1.pattern 1.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "2c2
< Second line with a date .*\\.
---
> Second line with a date 2014-11-22T16:41:00.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/08-example1.at:17"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:24: ax_at_diff_pattern 1.pattern 1.output"
at_fn_check_prepare_trace "08-example1.at:24"
( $at_check_trace; ax_at_diff_pattern 1.pattern 1.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/08-example1.at:24"
$at_failed && at_fn_log_failure
$at_traceon; }




{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:26: ax_at_diff_pyre 1.pattern 1.output"
at_fn_check_prepare_trace "08-example1.at:26"
( $at_check_trace; ax_at_diff_pyre 1.pattern 1.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/08-example1.at:26"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:28: diff 1.pattern 1.output | \${AWK} -f \${abs_top_srcdir}/src/check_pattern.awk"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "08-example1.at:28"
( $at_check_trace; diff 1.pattern 1.output | ${AWK} -f ${abs_top_srcdir}/src/check_pattern.awk
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/08-example1.at:28"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:30: diff 1.pattern 1.output | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "08-example1.at:30"
( $at_check_trace; diff 1.pattern 1.output | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/08-example1.at:30"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/08-example1.at:32: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 1.pattern 1.output"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "08-example1.at:32"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 1.pattern 1.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/08-example1.at:32"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 '09-example2.at:1' \
  "example 2: extra lines in output" "               "
at_xfail=no
(
  printf "%s\n" "9. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >2.pattern <<'_ATEOF'
line 1 [0-9]+\.[0-9]+s
line 2
line 3
line 4
_ATEOF


cat >2.output <<'_ATEOF'
line 1 25.63s
line 2
line 3
line 3b extra
line 4
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:29: diff 2.pattern 2.output"
at_fn_check_prepare_trace "09-example2.at:29"
( $at_check_trace; diff 2.pattern 2.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1c1
< line 1 [0-9]+\\.[0-9]+s
---
> line 1 25.63s
3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:29"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:38: ax_at_diff_pattern 2.pattern 2.output"
at_fn_check_prepare_trace "09-example2.at:38"
( $at_check_trace; ax_at_diff_pattern 2.pattern 2.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:38"
$at_failed && at_fn_log_failure
$at_traceon; }




{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:40: ax_at_diff_pyre 2.pattern 2.output"
at_fn_check_prepare_trace "09-example2.at:40"
( $at_check_trace; ax_at_diff_pyre 2.pattern 2.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:40"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:42: diff 2.pattern 2.output | \${AWK} -f \${abs_top_srcdir}/src/check_pattern.awk"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "09-example2.at:42"
( $at_check_trace; diff 2.pattern 2.output | ${AWK} -f ${abs_top_srcdir}/src/check_pattern.awk
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:44: diff 2.pattern 2.output | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "09-example2.at:44"
( $at_check_trace; diff 2.pattern 2.output | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:44"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/09-example2.at:46: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 2.pattern 2.output"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "09-example2.at:46"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 2.pattern 2.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3a4
> line 3b extra
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/09-example2.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 '10-example3.at:1' \
  "example 3: pyre (?P<group>) and \\g<group>" "      "
at_xfail=no
(
  printf "%s\n" "10. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >3.pattern <<'_ATEOF'
pid (?P<Pid>\d+) again=(?P=Pid)
second
third,\g<Pid>\g<Pid>
_ATEOF


{ set +x
printf "%s\n" "$at_srcdir/10-example3.at:13: echo \"pid \$\$ again=\$\$\"; echo \"second\"; echo \"third,\$\$\$\$\""
at_fn_check_prepare_dynamic "echo \"pid $$ again=$$\"; echo \"second\"; echo \"third,$$$$\"" "10-example3.at:13"
( $at_check_trace; echo "pid $$ again=$$"; echo "second"; echo "third,$$$$"
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/10-example3.at:13"
$at_failed && at_fn_log_failure
$at_traceon; }

mv stdout 3.output


{ set +x
printf "%s\n" "$at_srcdir/10-example3.at:16: ax_at_diff_pyre 3.pattern 3.output"
at_fn_check_prepare_trace "10-example3.at:16"
( $at_check_trace; ax_at_diff_pyre 3.pattern 3.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/10-example3.at:16"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/10-example3.at:19: diff 3.pattern 3.output | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "10-example3.at:19"
( $at_check_trace; diff 3.pattern 3.output | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/10-example3.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/10-example3.at:21: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 3.pattern 3.output"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "10-example3.at:21"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 3.pattern 3.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/10-example3.at:21"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 '11-group-escape.at:1' \
  "pyre \\g<group> escaping" "                        "
at_xfail=no
(
  printf "%s\n" "11. $at_setup_line: testing $at_desc ..."
  $at_traceon



cat >11.re <<'_ATEOF'
r(?P<re>.*)ge(?P=re)x
second
reg\g<re>x
fourth
fifth missing
sixth \g<unknown>
seven(77|47)\g<re>\1\.
_ATEOF


cat >11.out <<'_ATEOF'
r+*ge+*x
second
reg+*x
fourth
sixth \g<unknown>
seven47+*47.
_ATEOF




{ set +x
printf "%s\n" "$at_srcdir/11-group-escape.at:35: ax_at_diff_pyre 11.re 11.out"
at_fn_check_prepare_trace "11-group-escape.at:35"
( $at_check_trace; ax_at_diff_pyre 11.re 11.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "5d4
< fifth missing
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/11-group-escape.at:35"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/11-group-escape.at:37: diff 11.re 11.out | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "11-group-escape.at:37"
( $at_check_trace; diff 11.re 11.out | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "5d4
< fifth missing
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/11-group-escape.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/11-group-escape.at:39: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 11.re 11.out"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "11-group-escape.at:39"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 11.re 11.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "5d4
< fifth missing
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/11-group-escape.at:39"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 '12-example4.at:1' \
  "example 4: missing lines in output" "             "
at_xfail=no
(
  printf "%s\n" "12. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >4.pattern <<'_ATEOF'
line 1 [0-9]+\.[0-9]+s
line 2
line 3
l..e 4
line 5 extra
line 6
line 7.*
line 8
line 9
_ATEOF


cat >4.output <<'_ATEOF'
line 1 25.63s
line 2
line 3
line 4
line 6
line 7 match any
line 8
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:41: diff 4.pattern 4.output"
at_fn_check_prepare_trace "12-example4.at:41"
( $at_check_trace; diff 4.pattern 4.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "1c1
< line 1 [0-9]+\\.[0-9]+s
---
> line 1 25.63s
4,5c4
< l..e 4
< line 5 extra
---
> line 4
7c6
< line 7.*
---
> line 7 match any
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:59: ax_at_diff_pattern 4.pattern 4.output"
at_fn_check_prepare_trace "12-example4.at:59"
( $at_check_trace; ax_at_diff_pattern 4.pattern 4.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "4,5c4
< l..e 4
< line 5 extra
---
> line 4
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:59"
$at_failed && at_fn_log_failure
$at_traceon; }




{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:61: ax_at_diff_pyre 4.pattern 4.output"
at_fn_check_prepare_trace "12-example4.at:61"
( $at_check_trace; ax_at_diff_pyre 4.pattern 4.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "4,5c4
< l..e 4
< line 5 extra
---
> line 4
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:61"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:63: diff 4.pattern 4.output | \${AWK} -f \${abs_top_srcdir}/src/check_pattern.awk"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "12-example4.at:63"
( $at_check_trace; diff 4.pattern 4.output | ${AWK} -f ${abs_top_srcdir}/src/check_pattern.awk
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "4,5c4
< l..e 4
< line 5 extra
---
> line 4
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:63"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:65: diff 4.pattern 4.output | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "12-example4.at:65"
( $at_check_trace; diff 4.pattern 4.output | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "4,5c4
< l..e 4
< line 5 extra
---
> line 4
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:65"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/12-example4.at:67: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 4.pattern 4.output"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "12-example4.at:67"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 4.pattern 4.output
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "4,5c4
< l..e 4
< line 5 extra
---
> line 4
9d7
< line 9
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/12-example4.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 '13-escape.at:1' \
  "pyrediff -e (escape)" "                           "
at_xfail=no
(
  printf "%s\n" "13. $at_setup_line: testing $at_desc ..."
  $at_traceon



{ set +x
printf "%s\n" "$at_srcdir/13-escape.at:6: \${PYTHON} \${abs_top_srcdir}/src/pyrediff -e \${abs_srcdir}/13-escape.in > 13.re"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "13-escape.at:6"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff -e ${abs_srcdir}/13-escape.in > 13.re
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/13-escape.at:6"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/13-escape.at:10: diff \${abs_srcdir}/13-escape.re 13.re"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "13-escape.at:10"
( $at_check_trace; diff ${abs_srcdir}/13-escape.re 13.re
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/13-escape.at:10"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/13-escape.at:14: ax_at_diff_pyre 13.re \${abs_srcdir}/13-escape.in"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "13-escape.at:14"
( $at_check_trace; ax_at_diff_pyre 13.re ${abs_srcdir}/13-escape.in
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/13-escape.at:14"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 '14-group-unknown.at:1' \
  "pyre (?P=group) \\g<group2> unknown" "             "
at_xfail=no
(
  printf "%s\n" "14. $at_setup_line: testing $at_desc ..."
  $at_traceon



cat >14.re <<'_ATEOF'
r(?P<re>.*)ge(?P=bad)x
second
(third|3) is \2
fourth
\g<fifth>
_ATEOF


cat >14.out <<'_ATEOF'
r+*gex
second
third is third
fourth
5
_ATEOF


cat >14.diffre <<'_ATEOF'
# ERROR: Pattern "r\(\?P<re>\.\*\)ge\(\?P=bad\)x": unknown group name(: 'bad'| 'bad' at position 21)?
1c1
< r\(\?P<re>\.\*\)ge\(\?P=bad\)x
---
> r\+\*gex
# ERROR: Pattern "\(third\|3\) is \\2": (bogus escape: '\\\\2'|invalid group reference 2 at position 18)
3c3
< \(third\|3\) is \\2
---
> third is third
# ERROR: Pattern \g<fifth>: Unknown group
5c5
< \g<fifth>
---
> 5
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:46: ax_at_diff_pyre 14.re 14.out"
at_fn_check_prepare_trace "14-group-unknown.at:46"
( $at_check_trace; ax_at_diff_pyre 14.re 14.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/14-group-unknown.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:47: ax_at_diff_pyre 14.diffre stdout"
at_fn_check_prepare_trace "14-group-unknown.at:47"
( $at_check_trace; ax_at_diff_pyre 14.diffre stdout
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/14-group-unknown.at:47"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:49: diff 14.re 14.out | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "14-group-unknown.at:49"
( $at_check_trace; diff 14.re 14.out | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/14-group-unknown.at:49"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:50: ax_at_diff_pyre 14.diffre stdout"
at_fn_check_prepare_trace "14-group-unknown.at:50"
( $at_check_trace; ax_at_diff_pyre 14.diffre stdout
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/14-group-unknown.at:50"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:52: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 14.re 14.out"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "14-group-unknown.at:52"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 14.re 14.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; tee stdout <"$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/14-group-unknown.at:52"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/14-group-unknown.at:53: ax_at_diff_pyre 14.diffre stdout"
at_fn_check_prepare_trace "14-group-unknown.at:53"
( $at_check_trace; ax_at_diff_pyre 14.diffre stdout
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/14-group-unknown.at:53"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 '15-alternation-bad.at:1' \
  "pyre alternation bad" "                           "
at_xfail=no
(
  printf "%s\n" "15. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >15.re <<'_ATEOF'
first\|(?P<num>.*)\|(?P=num)\|
second
1|three|
four
5,\g<num>\|five
_ATEOF


cat >15.out <<'_ATEOF'
first|1|1|
second
3|three|
four
5,1|five
_ATEOF




{ set +x
printf "%s\n" "$at_srcdir/15-alternation-bad.at:33: ax_at_diff_pyre 15.re 15.out"
at_fn_check_prepare_trace "15-alternation-bad.at:33"
( $at_check_trace; ax_at_diff_pyre 15.re 15.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3c3
< 1|three|
---
> 3|three|
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/15-alternation-bad.at:33"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/15-alternation-bad.at:35: diff 15.re 15.out | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "15-alternation-bad.at:35"
( $at_check_trace; diff 15.re 15.out | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3c3
< 1|three|
---
> 3|three|
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/15-alternation-bad.at:35"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/15-alternation-bad.at:37: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 15.re 15.out"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "15-alternation-bad.at:37"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 15.re 15.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "3c3
< 1|three|
---
> 3|three|
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/15-alternation-bad.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }



  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 '16-alternation-optional.at:1' \
  "pyre alternation optional" "                      "
at_xfail=no
(
  printf "%s\n" "16. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >16.re <<'_ATEOF'
(first|(?P<num>.*))
second
3,\g<num>\|five
_ATEOF



cat >16-1.out <<'_ATEOF'
first
second
3,|five
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:25: ax_at_diff_pyre 16.re 16-1.out"
at_fn_check_prepare_trace "16-alternation-optional.at:25"
( $at_check_trace; ax_at_diff_pyre 16.re 16-1.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:25"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:27: diff 16.re 16-1.out | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "16-alternation-optional.at:27"
( $at_check_trace; diff 16.re 16-1.out | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:27"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:29: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 16.re 16-1.out"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "16-alternation-optional.at:29"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 16.re 16-1.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:29"
$at_failed && at_fn_log_failure
$at_traceon; }




cat >16-2.out <<'_ATEOF'
111
second
3,111|five
_ATEOF



{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:44: ax_at_diff_pyre 16.re 16-2.out"
at_fn_check_prepare_trace "16-alternation-optional.at:44"
( $at_check_trace; ax_at_diff_pyre 16.re 16-2.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:44"
$at_failed && at_fn_log_failure
$at_traceon; }



{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:46: diff 16.re 16-2.out | \${PYTHON} \${abs_top_srcdir}/src/pyrediff -f"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "16-alternation-optional.at:46"
( $at_check_trace; diff 16.re 16-2.out | ${PYTHON} ${abs_top_srcdir}/src/pyrediff -f
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
printf "%s\n" "$at_srcdir/16-alternation-optional.at:48: \${PYTHON} \${abs_top_srcdir}/src/pyrediff 16.re 16-2.out"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "16-alternation-optional.at:48"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff 16.re 16-2.out
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/16-alternation-optional.at:48"
$at_failed && at_fn_log_failure
$at_traceon; }




  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 '17-version.at:1' \
  "pyrediff --version" "                             "
at_xfail=no
(
  printf "%s\n" "17. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/17-version.at:3: \${PYTHON} \${abs_top_srcdir}/src/pyrediff --version"
at_fn_check_prepare_notrace 'a ${...} parameter expansion' "17-version.at:3"
( $at_check_trace; ${PYTHON} ${abs_top_srcdir}/src/pyrediff --version
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "pyrediff ${PACKAGE_VERSION}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/17-version.at:3"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
